統計一下各個商品的平均單價

mysql> SELECT ProductID, AVG(UnitPrice) avg FROM OrderDetails GROUP BY ProductID ORDER BY avg;

mysql> SELECT ProductID, AVG(UnitPrice) avg FROM OrderDetails GROUP BY ProductID ORDER BY avg DESC;

mysql> SELECT ProductID, AVG(UnitPrice) avg FROM OrderDetails GROUP BY ProductID HAVING avg > 70 ORDER BY avg DESC;

mysql> SELECT ProductID, AVG(UnitPrice) avg FROM OrderDetails WHERE ProductID > 10 GROUP BY ProductID HAVING avg > 70 ORDER BY avg DESC;

mysql> SELECT ProductID,SUM(Quantity) sump, SUM(UnitPrice * Quantity) sump, SUM(UnitPrice * Quantity) / SUM(Quantity) avg 
    -> FROM OrderDetails
    -> GROUP BY ProductID;

統計各個客戶的訂單數量
mysql> SELECT CustomerID, COUNT(*) nums FROM Orders GROUP BY CustomerID;

mysql> SELECT CustomerID, COUNT(*) nums FROM Orders GROUP BY CustomerID ORDER BY nums DESC;

mysql> SELECT CustomerID, COUNT(*) nums FROM Orders GROUP BY CustomerID HAVING nums < 10 ORDER BY nums DESC;

mysql> SELECT Freight, ROUND(Freight, 1) FROM Orders;

SELECT ProductName, CONCAT("$", UnitPrice), CONCAT("$", CAST(UnitPrice AS CHAR(10))), UnitsInStock  FROM Products LIMIT 10;

mysql> SELECT ProductID, ProductName FROM Products ORDER BY ProductID LIMIT 0, 10;

mysql> SELECT LastName, BirthDate, HireDate FROM Employees;

mysql> SELECT LastName, BirthDate, HireDate, YEAR(BirthDate) byear, YEAR(HireDate) hyear, YEAR(HireDate)-YEAR(BirthDate) age FROM Employee

mysql> SELECT DATEDIFF('2021-11-13','2021-10-13');
+-------------------------------------+
| DATEDIFF('2021-11-13','2021-10-13') |
+-------------------------------------+
|                                  31 |
+-------------------------------------+
1 row in set (0.00 sec)

mysql> SELECT LastName, BirthDate, HireDate, YEAR(HireDate)-YEAR(BirthDate) age, 
    -> DATEDIFF(HireDate, BirthDate) / 365
    -> FROM Employees;

mysql> SELECT LastName, BirthDate FROM Employees WHERE MONTH(BirthDate ) = MONTH(NOW());


mysql> SELECT OrderID, CustomerID FROM Orders WHERE OrderID = 10248;
+---------+------------+
| OrderID | CustomerID |
+---------+------------+
|   10248 | VINET      |
+---------+------------+
1 row in set (0.00 sec)

mysql> SELECT CustomerID, CompanyName FROM Customers WHERE CustomerID = 'VINET';
+------------+---------------------------+
| CustomerID | CompanyName               |
+------------+---------------------------+
| VINET      | Vins et alcools Chevalier |
+------------+---------------------------+

mysql> SELECT CustomerID, CompanyName FROM Customers WHERE CustomerID = (SELECT CustomerID FROM Orders WHERE OrderID = 10248);
+------------+---------------------------+
| CustomerID | CompanyName               |
+------------+---------------------------+
| VINET      | Vins et alcools Chevalier |
+------------+---------------------------+
1 row in set (0.01 sec)

1997 年有下訂單的客戶編號 => 客戶名稱
mysql> SELECT CustomerID, OrderDate FROM Orders WHERE OrderDate BETWEEN '1997-01-01' AND '1997-12-31';

mysql> SELECT CompanyName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE OrderDate BETWEEN '1997-01-01' AND '1997-12-31');

mysql> SELECT ProductName, SupplierID FROM Products WHERE SupplierID IN
    -> (SELECT SupplierID FROM Suppliers WHERE CompanyName IN ('Tokyo Traders', "Mayumi's", 'Pavlova, Ltd.' ));
+------------------+------------+
| ProductName      | SupplierID |
+------------------+------------+
| Konbu            |          6 |
| Tofu             |          6 |
| Genen Shouyu     |          6 |
| Pavlova          |          7 |
| Alice Mutton     |          7 |
| Carnarvon Tigers |          7 |
| Vegie-spread     |          7 |
| Outback Lager    |          7 |
| Mishi Kobe Niku  |          4 |
| Ikura            |          4 |
| Longlife Tofu    |          4 |
+------------------+------------+
11 rows in set (0.01 sec)

mysql> SELECT ProductID, ProductName FROM Products WHERE CategoryID IN (SELECT CategoryID FROM Categories WHERE CategoryName = 'Seafood');
+-----------+---------------------------------+
| ProductID | ProductName                     |
+-----------+---------------------------------+
|        10 | Ikura                           |
|        13 | Konbu                           |
|        18 | Carnarvon Tigers                |
|        30 | Nord-Ost Matjeshering           |
|        36 | Inlagd Sill                     |
|        37 | Gravad lax                      |
|        40 | Boston Crab Meat                |
|        41 | Jack's New England Clam Chowder |
|        45 | Rogede sild                     |
|        46 | Spegesild                       |
|        58 | Escargots de Bourgogne          |
|        73 | Rd Kaviar                       |
+-----------+---------------------------------+
12 rows in set (0.00 sec)

Join 查詢, 合併表查詢
SELECT table1.col1, table1.col2,..., table2.col1, ....
FROM table1 JOIN table2 ON (table1.col = table2.col)
WHERE 條件式
...
...


mysql> SELECT Employees.EmployeeID, Employees.FirstName, Employees.LastName, Orders.OrderID, Orders.OrderDate  
    -> FROM Employees JOIN Orders ON
    -> (Employees.EmployeeID = Orders.EmployeeID);

mysql> SELECT Employees.EmployeeID, Employees.FirstName, Employees.LastName, Orders.OrderID, Orders.OrderDate  
    -> FROM Orders JOIN Employees ON
    -> (Orders.EmployeeID = Employees.EmployeeID );

mysql> SELECT e.EmployeeID, e.FirstName, e.LastName, o.OrderID, o.OrderDate 
    -> FROM Employees e JOIN Orders o ON 
    -> (e.EmployeeID = o.EmployeeID )
    -> ORDER BY o.OrderDate;

多重JOIN
SELECT tb1.col1, tb2.col2, tb3.col3
FROM tb1
        JOIN tb2 ON (tb1.colx = tb2.colx)
        JOIN tb3 ON (tb2.coly = tb3.coly)
......

mysql> SELECT o.OrderID, c.CompanyName, e.LastName 
    -> FROM Orders o
    -> JOIN Employees e ON (o.EmployeeID = e.EmployeeID)
    -> JOIN Customers c ON (o.CustomerID = c.CustomerID)
    -> WHERE o.ShippedDate > o.RequiredDate 
    -> ORDER BY c.CompanyName;

哪些公司的訂單數量在10筆以上(在1997年以後), 顯示公司名稱

SELECT c.CompanyName, COUNT(o.OrderID) nums
FROM Orders o JOIN Customers c ON
    (o.CustomerID = c.CustomerID)
WHERE o.OrderDate >= '1997-01-01'
GROUP BY c.CompanyName
HAVING COUNT(o.OrderID) >= 10
ORDER BY nums DESC;

SELECT CompanyName, ProductID, UnitPrice * Quantity * (1 - Discount) tp
FROM OrderDetails od
    JOIN Orders o ON (o.OrderID = od.OrderID)
    JOIN Customers c ON (c.CustomerID = o.CustomerID)
WHERE UnitPrice * Quantity * (1 - Discount) >= 10000